#######################################################################
#
#  433MHz Empfänger für einen Sender zur Steuerung von Funksteckdosen
#    au fder Basis eines ESP8266 D1 mini
#
#  Im Homeassistant muss es ein pyscript geben, dass den Service
#  pyscript.wzrc_rc_switch bereitstellt.
#
#  Dem ESPHome-Gerät muss erlaubt sein, Home Assistant-Aktionen auszuführen.
#  Das wird im Homeassistant für das Gerät eingestellt.
#
#  Mit den lambda-Ausdrücken werden die Parameter aus der C++-Implementierung
#  gelesen, in einen String (einer Dezimalzahl) umgewandelt und als Parameter
#  an den Service übergeben. 
#
#######################################################################
esphome:
  name: wzlightctrl1
  friendly_name: wzLightCtrl1

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_pwd

wifi:
  networks:
    - ssid: !secret 1_wifi_ssid
    - password: !secret 1_wifi_password
    - ssid: !secret 2_wifi_ssid
    - password: !secret 2_wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

captive_portal:

switch:
  - platform: gpio
    name: "pin2"
    pin:
      number: D4      # GPIO02
      inverted: true

remote_receiver:
  pin:
    number: D6
  dump:
#     - raw
    - rc_switch
  tolerance: 50%
  buffer_size: 256
#      filter: 50us
  filter: 250us
  idle: 4ms

  on_rc_switch:
    then:
      - homeassistant.service:
          service: pyscript.wzrc_rc_switch
          data:
            protocol: !lambda return (to_string(x.protocol));          # !lambda nutz c++ Inline Code. Das Ergebnis 
            code: !lambda return (to_string(x.code));                  # wird hier Parametern des Services zugewiesen